name: Standard.AI.OpenAI Build
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Pulling Code
      uses: actions/checkout@v3
    - name: Installing .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.201
    - name: Restoring Packages
      run: dotnet restore
    - name: Building Solution
      run: dotnet build --no-restore
    - name: Running Tests
      run: dotnet test --no-build --verbosity normal
    env:
      ApiKey: ${{ secrets.APIKEY }}
      OrgId: ${{ secrets.ORGID }}
      STANDARD_AI_OPENAI_IS_RELEASE_CANDIDATE: >-
        ${{
          (
            github.event_name == 'pull_request' && 
            startsWith(github.event.pull_request.title, 'RELEASES:') && 
            contains(github.event.pull_request.labels.*.name, 'RELEASES')
          )
          ||
          (
            github.event_name == 'push' && 
            startsWith(github.event.head_commit.message, 'RELEASES:') && 
            startsWith(github.ref_name, 'RELEASE')
          )
        }}
  add_tag:
    runs-on: windows-latest
    needs:
    - build
    if: >-
      needs.build.result == 'success' && 

      github.event.pull_request.merged && 

      github.event.pull_request.base.ref == 'main' && 

      startsWith(github.event.pull_request.title, 'RELEASES:') && 

      contains(github.event.pull_request.labels.*.name, 'RELEASES')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_FOR_TAGGING }}
    - name: Configure Git
      run: >-
        git config user.name "GitHub Action"

        git config user.email "action@github.com"
    - name: Extract Version
      run: >-
        version_number=$(awk -v RS='' -F'</?Version>' 'NF>1{print $2}' Standard.AI.OpenAI\Standard.AI.OpenAI.csproj | sed -e 's/^[[:space:]]*//')

        echo 'version_number<<EOF' >> $GITHUB_ENV

        echo -e "$version_number" >> $GITHUB_ENV

        echo 'EOF' >> $GITHUB_ENV

        echo "Version - ${{ env.version_number }}"
    - name: Extract Package Release Notes
      run: >-
        package_release_notes=$(awk -v RS='' -F'</?PackageReleaseNotes>' 'NF>1{print $2}' Standard.AI.OpenAI\Standard.AI.OpenAI.csproj | sed -e 's/^[[:space:]]*//')

        echo 'package_release_notes<<EOF' >> $GITHUB_ENV

        echo -e "$package_release_notes" >> $GITHUB_ENV

        echo 'EOF' >> $GITHUB_ENV

        echo "PackageReleaseNotes - ${{ env.package_release_notes }}"
    - name: Create GitHub Tag
      run: >-
        git tag -a "v${{ env.version_number }}" -m "Release - v${{ env.version_number }}"

        git push origin --tags
    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: v${{ env.version_number }}
        release_name: Release - v${{ env.version_number }}
        body: >-
          ## Release - v${{ env.version_number }}


          ### Release Notes

          ${{ env.package_release_notes }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_FOR_TAGGING }}
